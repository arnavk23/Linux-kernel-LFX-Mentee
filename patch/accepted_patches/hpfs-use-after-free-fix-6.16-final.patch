Subject: [PATCH] hpfs: fix use-after-free in hpfs_get_ea

Fix a use-after-free vulnerability in hpfs_get_ea() where corrupted
extended attribute data could cause strcmp() to access freed memory.

The issue occurs in both EA iteration loops where next_ea() can produce
invalid pointers due to insufficient validation of ea->namelen and the
calculated next EA position. This can lead to accessing memory that has
been freed or is outside valid boundaries.

The vulnerability manifests when strcmp(ea->name, key) is called with
ea pointing to corrupted memory. Add comprehensive bounds checking:

1. First loop (fnode EA area): Validate EA structure, namelen bounds,
   name field boundaries, and next_ea() results before strcmp()
2. Second loop (external EA): Validate namelen and buffer bounds after
   reading EA data from disk before strcmp()

This addresses both the original crash at line 139 and prevents the
secondary crash that would occur at the external EA strcmp() call.

Reported-by: syzbot+fa88eb476e42878f2844@syzkaller.appspotmail.com
Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
Cc: stable@vger.kernel.org
Signed-off-by: Arnav Kapoor <kapoorarnav43@gmail.com>

---
 fs/hpfs/ea.c | 33 +++++++++++++++++++++++++++++++++
 1 file changed, 33 insertions(+)

diff --git a/fs/hpfs/ea.c b/fs/hpfs/ea.c
index 102ba18e561f..ab1234567890 100644
--- a/fs/hpfs/ea.c
+++ b/fs/hpfs/ea.c
@@ -135,7 +135,31 @@ char *hpfs_get_ea(struct super_block *s, struct fnode *fnode, char *key, int *si
 	secno a;
 	struct extended_attribute *ea;
 	struct extended_attribute *ea_end = fnode_end_ea(fnode);
-	for (ea = fnode_ea(fnode); ea < ea_end; ea = next_ea(ea))
+	for (ea = fnode_ea(fnode); ea < ea_end; ea = next_ea(ea)) {
+		/* Validate EA structure bounds */
+		if ((char *)ea + sizeof(*ea) > (char *)ea_end) {
+			hpfs_error(s, "EA structure exceeds bounds");
+			return NULL;
+		}
+
+		/* Validate namelen to prevent overflow */
+		if (ea->namelen >= 256) {
+			hpfs_error(s, "EA namelen too large: %d", ea->namelen);
+			return NULL;
+		}
+
+		/* Ensure name field is within bounds */
+		if ((char *)ea + 5 + ea->namelen > (char *)ea_end) {
+			hpfs_error(s, "EA name field exceeds bounds");
+			return NULL;
+		}
+
+		/* Validate next_ea() result will be within bounds */
+		if (next_ea(ea) > ea_end) {
+			hpfs_error(s, "next EA exceeds bounds");
+			return NULL;
+		}
+
 		if (!strcmp(ea->name, key)) {
 			if (ea_indirect(ea))
 				return get_indirect_ea(s, ea_in_anode(ea), ea_sec(ea), *size = ea_len(ea));
@@ -147,6 +171,7 @@ char *hpfs_get_ea(struct super_block *s, struct fnode *fnode, char *key, int *si
 			ret[ea_valuelen(ea)] = 0;
 			return ret;
 		}
+	}
 	a = le32_to_cpu(fnode->ea_secno);
 	len = le32_to_cpu(fnode->ea_size_l);
 	ano = fnode_in_anode(fnode);
@@ -162,6 +187,14 @@ char *hpfs_get_ea(struct super_block *s, struct fnode *fnode, char *key, int *si
 		if (hpfs_ea_read(s, a, ano, pos, 4, ex)) return NULL;
 		if (hpfs_ea_read(s, a, ano, pos + 4, ea->namelen + 1 + (ea_indirect(ea) ? 8 : 0), ex + 4))
 			return NULL;
+
+		/* Validate namelen after reading EA data from disk */
+		if (ea->namelen >= 256) {
+			hpfs_error(s, "EA namelen too large in external EA: %d", ea->namelen);
+			return NULL;
+		}
+
+		/* Ensure name field doesn't exceed buffer bounds */
+		if (ea->namelen + 1 > sizeof(ex) - 4) {
+			hpfs_error(s, "EA name exceeds buffer in external EA");
+			return NULL;
+		}
+
 		if (!strcmp(ea->name, key)) {
 			if (ea_indirect(ea))
 				return get_indirect_ea(s, ea_in_anode(ea), ea_sec(ea), *size = ea_len(ea));
-- 
2.34.1
