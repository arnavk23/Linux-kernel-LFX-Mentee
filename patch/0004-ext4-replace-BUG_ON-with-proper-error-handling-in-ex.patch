From f3b41629f88908fec131df89e8738cfe917b812b Mon Sep 17 00:00:00 2001
From: Arnav Kapoor <kapoorarnav43@gmail.com>
Date: Sun, 29 Jun 2025 15:11:01 +0530
Subject: [PATCH 4/4] ext4: replace BUG_ON with proper error handling in
 ext4_split_extent_at

Replace BUG_ON() with ext4_warning() and return ERR_PTR(-EINVAL)
to gracefully handle invalid split positions and flags.

Signed-off-by: Arnav Kapoor <kapoorarnav43@gmail.com>
---
 fs/ext4/extents.c | 21 ++++++++++++++++-----
 1 file changed, 16 insertions(+), 5 deletions(-)

diff --git a/fs/ext4/extents.c b/fs/ext4/extents.c
index c616a16a9f36..321ddbc0f48c 100644
--- a/fs/ext4/extents.c
+++ b/fs/ext4/extents.c
@@ -3200,11 +3200,22 @@ static struct ext4_ext_path *ext4_split_extent_at(handle_t *handle,
 	ee_len = ext4_ext_get_actual_len(ex);
 	newblock = split - ee_block + ext4_ext_pblock(ex);
 
-	BUG_ON(split < ee_block || split >= (ee_block + ee_len));
-	BUG_ON(!ext4_ext_is_unwritten(ex) &&
-	       split_flag & (EXT4_EXT_MAY_ZEROOUT |
-			     EXT4_EXT_MARK_UNWRIT1 |
-			     EXT4_EXT_MARK_UNWRIT2));
+	if (split < ee_block || split >= (ee_block + ee_len)) {
+		ext4_warning(inode->i_sb,
+                 "ext4_split_extent_at: invalid split=%u extent=[%u..%u]",
+                 split, ee_block, ee_block + ee_len - 1);
+		return ERR_PTR(-EINVAL);
+	}
+	
+	if (!ext4_ext_is_unwritten(ex) &&
+    split_flag & (EXT4_EXT_MAY_ZEROOUT |
+                  EXT4_EXT_MARK_UNWRIT1 |
+                  EXT4_EXT_MARK_UNWRIT2)) {
+					ext4_warning(inode->i_sb,
+						"ext4_split_extent_at: invalid flags 0x%x on written extent",
+						split_flag);
+					return ERR_PTR(-EINVAL);
+				}
 
 	err = ext4_ext_get_access(handle, inode, path + depth);
 	if (err)
-- 
2.43.0

